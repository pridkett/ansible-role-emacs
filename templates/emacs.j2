;; -*- coding: utf-8 -*-

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
;; this file is maintained by ansible-role-emacs               ;;
;; see: https://github.com/pridkett/ansible-role-emacs         ;;
;; changes may be overwritten by future invocations of ansible ;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;

;; ;;;;;;;;;;;;;;;;;;;;;; ;;
;; emacs package archives ;;
;; ;;;;;;;;;;;;;;;;;;;;;; ;;
(require 'package)
{% if 'package_archives' in emacs %}
{% for archive in emacs['package_archives'] %}
(add-to-list 'package-archives '("{{ archive["name"] }}" . "{{ archive["url"] }}") t)
{% endfor %}
{% endif %}
(if (< emacs-major-version 27)
    (package-initialize))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
;; Handler for initializing use-package                                        ;;
;; see:                                                                        ;;
;;   https://github.com/jwiegley/use-package/issues/219#issuecomment-108882966 ;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
(eval-when-compile
  (require 'package)
  (package-initialize t))
(unless (boundp 'package-pinned-packages)
  (setq package-pinned-packages ()))

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))

(eval-when-compile
  (require-package 'use-package)
  (require 'use-package))

;; ;;;;;;;;;;;;;; ;;
;; emacs packages ;;
;; ;;;;;;;;;;;;;; ;;
{% if 'packages' in emacs %}
{% for package in emacs['packages'] %}
(use-package {{ package['name'] }}
  :ensure t
{% for key, value in package.items() if key != 'name' %}
  :{{ key }}
  {{ value }}
{% endfor %}
)
{% endfor %}
{% endif %}

{% if 'config' in emacs %}
{{ emacs['config'] }}
{% endif %}

(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "import" nil nil nil filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))

(defun org-insert-clipboard-image (&optional file)
  (interactive "F")
  (shell-command (concat "pngpaste " file))
  (insert (concat "[[file:" file "]]"))
  (org-display-inline-images))

;; ;;;;;;;;;;;;; ;;
;; UTF-8 Support ;;
;; ;;;;;;;;;;;;; ;;

;; the one true hack? https://emacs.stackexchange.com/a/46151/29014
(set-language-environment "UTF-8")

;; more settings from: https://stackoverflow.com/a/1674535/57626
(setq-default buffer-file-coding-system 'utf-8-unix)
(setq-default default-buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)

;; ;;;;;;;;;;;;;; ;;
;; other settings ;;
;; ;;;;;;;;;;;;;; ;;

;; start emacs server see: https://stackoverflow.com/a/5571983/57626
(load "server")
(unless (server-running-p) (server-start))

;; ;;;;;;;;;;;;;;; ;;
;; custom settings ;;
;; ;;;;;;;;;;;;;;; ;;

;; Note: This section will be overwritten, by emacs configuration changes too

{% if 'custom' in emacs %}
{{ emacs['custom'] }}
{% endif %}
